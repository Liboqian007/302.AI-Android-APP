package com.ai302.app.ui

import SettingDialog
import android.app.Activity
import android.app.Dialog
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.MediaStore
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.Gravity
import android.view.View
import android.view.WindowManager
import android.view.animation.Animation
import android.view.animation.AnimationUtils
import android.webkit.JavascriptInterface
import android.webkit.WebResourceRequest
import android.webkit.WebResourceResponse
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.annotation.RequiresExtension
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleCoroutineScope
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.ai302.app.MyApplication
import com.ai302.app.R
import com.ai302.app.adapter.EmojiAdapter
import com.ai302.app.data.AppStoreItem
import com.ai302.app.databinding.ActivityMainBinding
import com.ai302.app.databinding.ActivitySettingBinding
import com.ai302.app.datastore.DataStoreManager
import com.ai302.app.http.ApiService
import com.ai302.app.http.NetworkFactory
import com.ai302.app.infa.OnSettingDialogClickListener
import com.ai302.app.room.ChatItemRoom
import com.ai302.app.utils.CustomUrlSpan
import com.ai302.app.utils.ScreenUtils.onClickColor
import com.ai302.app.utils.SystemUtils
import com.ai302.app.utils.ViewAnimationUtils
import com.ai302.app.viewModel.ChatViewModel
import com.bumptech.glide.Glide
import com.bumptech.glide.request.RequestOptions
import com.github.lzyzsd.jsbridge.BridgeWebView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import org.json.JSONException
import org.json.JSONObject

class SettingActivity : AppCompatActivity(), OnSettingDialogClickListener {
    private lateinit var binding: ActivitySettingBinding
    private val chatViewModel: ChatViewModel by viewModels()
    private var imageUrlServiceResult = ""
    private val PICK_IMAGE_REQUEST = 1
    private lateinit var dataStoreManager: DataStoreManager

    private lateinit var emojiAdapter: EmojiAdapter
    private lateinit var fadeInAnimation: Animation
    private lateinit var fadeOutAnimation: Animation
    private var isEmojiPanelVisible = false
    private var isClickTest = false
    private val BASE_URL = "https://api.302.ai/"
    private var CUSTOMIZE_URL_TWO = "https://api.siliconflow.cn/"
    private var apiService = NetworkFactory.createApiService(ApiService::class.java,BASE_URL)
    private var serviceProvider = "302AI"

    private var localChatType = ""
    private var localChatPrompt = "ËøôÊòØÂà†Èô§ËøáÁöÑÂÜÖÂÆπÂèò‰∏∫Á©∫ÁôΩ"
    private var localIsPrompt = false

    private var mWebView: BridgeWebView? = null
    private var mDialog:SettingDialog?=null

    // ÂàùÂßãÂåñË°®ÊÉÖÂàóË°®
    val emojis = listOf(
        "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá",
        "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö",
        "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©",
        "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£",
        "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§Ø",
        "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î",
        "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üòí", "üôÑ", "üò≥", "ü§§",
        "üò™", "üò¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï", "ü§ë", "ü§†",
        "üòà", "üëø", "üëπ", "üë∫", "üíÄ", "‚ò†Ô∏è", "üëª", "üëΩ", "üëæ", "ü§ñ",
        "üí©", "üëª", "üéÉ", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ",
        "üòø", "üòæ", "üëê", "üëè", "ü§ù", "üëç", "üëé", "‚úä", "üëä", "ü§õ", "ü§ú",
        "ü§û", "‚úåÔ∏è", "ü§ü", "üëå", "üëà", "üëâ", "üëÜ", "üëá", "‚òùÔ∏è", "‚úã",
        "ü§ö", "üñêÔ∏è", "üññ", "üëã", "ü§ô", "üí™", "ü¶æ", "üëÇ", "ü¶ª", "üëÉ",
        "üëÅÔ∏è", "üëÄ", "üëÖ", "üëÑ", "üë∂", "üßí", "üë¶", "üëß", "üë®", "üë©",
        "üßë", "üë¥", "üëµ", "üë±", "üëÆ", "üïµÔ∏è", "üë©‚Äç‚öïÔ∏è", "üë®‚Äç‚öïÔ∏è", "üë©‚Äçüåæ", "üë®‚Äçüåæ",
        "üë©‚Äçüç≥", "üë®‚Äçüç≥", "üë©‚Äçüéì", "üë®‚Äçüéì", "üë©‚Äçüé§", "üë®‚Äçüé§", "üë©‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüè´", "üë®‚Äçüè´",
        "üë©‚Äç‚öñÔ∏è", "üë®‚Äç‚öñÔ∏è", "üë©‚Äçüöí", "üë®‚Äçüöí", "üë©‚Äç‚úàÔ∏è", "üë®‚Äç‚úàÔ∏è", "üë©‚ÄçüöÄ", "üë®‚ÄçüöÄ", "üë©‚Äç‚öôÔ∏è", "üë®‚Äç‚öôÔ∏è",
        "üë©‚Äçüîß", "üë®‚Äçüîß", "üë©‚Äçüé®", "üë®‚Äçüé®", "üë©‚Äçüè≠", "üë®‚Äçüè≠", "üë©‚Äçüíº", "üë®‚Äçüíº", "üë©‚Äçüî¨", "üë®‚Äçüî¨",
        "üë©‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüéì", "üë®‚Äçüéì", "üë©‚Äçüè´", "üë®‚Äçüè´", "üë©‚Äç‚öïÔ∏è", "üë®‚Äç‚öïÔ∏è", "üë©‚Äçüîß", "üë®‚Äçüîß",
        "üë©‚Äçüé§", "üë®‚Äçüé§", "üë©‚Äçüöí", "üë®‚Äçüöí", "üë©‚Äç‚úàÔ∏è", "üë®‚Äç‚úàÔ∏è", "üë©‚ÄçüöÄ", "üë®‚ÄçüöÄ", "üë©‚Äç‚öñÔ∏è", "üë®‚Äç‚öñÔ∏è"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        // Âú® super.onCreate() Âíå setContentView() ‰πãÂâçÂàáÊç¢ÂõûÊ≠£Â∏∏‰∏ªÈ¢ò
        setTheme(R.style.Theme_Ai302)
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        //setContentView(R.layout.activity_setting)
        dataStoreManager = DataStoreManager(MyApplication.myApplicationContext)
        binding = ActivitySettingBinding.inflate(layoutInflater)

        lifecycleScope.launch((Dispatchers.IO)) {

            val readAppEmojisData = dataStoreManager.readAppEmojisData.first()
            readAppEmojisData?.let {
                Log.e("setting","readAppEmojisDataÊòØÂ§öÂ∞ëÔºö$it")
                binding.imageProfile.text = it
            }

        }

        /*chatViewModel.imageUrlServiceResult.observe(this){
            Log.e("ceshi","ËøîÂõûÁöÑÂõæÁâáÂú∞ÂùÄÂõûÂ§çÔºö$it")
            it?.let {
                imageUrlServiceResult = it

                lifecycleScope.launch(Dispatchers.IO) {
                    Log.e("ceshi","ËæìÂÖ•Ôºö${imageUrlServiceResult}")
                    dataStoreManager.saveImageUrl(imageUrlServiceResult)
                }
                // ÊñπÊ≥ï1Ôºö‰ΩøÁî®ÂÜÖÁΩÆÁöÑCircleCropÂèòÊç¢
                Glide.with(this)
                    .load(imageUrlServiceResult)
                    .apply(RequestOptions.circleCropTransform())
                    .placeholder(android.R.drawable.ic_menu_gallery)
                    .error(android.R.drawable.stat_notify_error)
                    .into(binding.imageProfile)


            }
        }*/

        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        initListener()


    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun onResume() {
        super.onResume()
        binding.settingBack.setBackgroundResource(R.drawable.shape_select_site_bg_line1)
        binding.editImage.setBackgroundResource(R.drawable.shape_select_site_bg_line1)
        lifecycleScope.launch((Dispatchers.IO)) {
            val readServiceProviderData = dataStoreManager.readServiceProviderData.first()
            val readServiceUrl = dataStoreManager.readServiceUrl.first()?:""
            val readCueWordsSwitch = dataStoreManager.readCueWordsSwitch.first()
            val readCueWords = dataStoreManager.readCueWords.first()
            val readModelType = dataStoreManager.readModelType.first()
            readCueWordsSwitch?.let {
                localIsPrompt = it
            }
            readCueWords?.let {
                if (localIsPrompt){
                    localChatPrompt = it
                }
            }
            readModelType?.let {
                localChatType = it
            }

            if (CustomUrlSpan.UrlValidator.isValid302Url(readServiceUrl)){
                CUSTOMIZE_URL_TWO = readServiceUrl
            }else{

            }
            readServiceProviderData?.let {
                Log.e("ceshi","ÊúçÂä°ÂïÜÊòØÂ§öÂ∞ëÔºö$readServiceProviderData")
                serviceProvider = it
                if (it=="302.AI"){
                    apiService = NetworkFactory.createApiService(ApiService::class.java,BASE_URL)
                }else if (it=="Ëá™ÂÆö‰πâ"){
                    apiService = NetworkFactory.createApiService(ApiService::class.java,CUSTOMIZE_URL_TWO)
                }
            }



            val data = dataStoreManager.readData.first()
            data?.let {
                Log.e("setting","appKeyÊòØÂ§öÂ∞ëÔºö$it")
                //chatViewModel.get302AiModelList(it,apiService)
            }

            val readAppEmojisData = dataStoreManager.readAppEmojisData.first()
            readAppEmojisData?.let {
                Log.e("setting","readAppEmojisDataÊòØÂ§öÂ∞ëÔºö$it")
                binding.imageProfile.text = it
            }

        }
    }

    private fun initListener(){
        // ÂàùÂßãÂåñÂä®Áîª
        fadeInAnimation = AnimationUtils.loadAnimation(this, android.R.anim.fade_in)
        fadeOutAnimation = AnimationUtils.loadAnimation(this, android.R.anim.fade_out)


        // ËÆæÁΩÆRecyclerView
//        binding.emojiRecyclerView.layoutManager = GridLayoutManager(this, 5)
//        emojiAdapter = EmojiAdapter(emojis) { selectedEmoji ->
//            // Ë°®ÊÉÖË¢´ÈÄâ‰∏≠Êó∂Êõ¥Êñ∞ImageViewÂπ∂ÈöêËóèÈù¢Êùø
//            updateSelectedEmoji(selectedEmoji)
//            toggleEmojiPanelVisibility()
//        }
//        binding.emojiRecyclerView.adapter = emojiAdapter


        val settingDialog = SettingDialog(this,this)
        mDialog = settingDialog
        chatViewModel.modelListResult.observe(this){
            Log.e("setting","Ê®°ÂûãÂàóË°®ÂõûÂ§çÔºö$it")
            if (isClickTest){
                isClickTest = false
                if (it.isEmpty()){
                    //isTrueApiKey = false
                    lifecycleScope.launch(Dispatchers.Main) {
                        Toast.makeText(this@SettingActivity, "ËøîÂõûÊ®°Âûã‰∏∫Á©∫ÔºåËØ∑Ê£ÄÊü•ÂüüÂêçÊàñËÄÖapikeyÂπ∂ÈáçËØï", Toast.LENGTH_SHORT).show()
                    }
                }else{
                    //isTrueApiKey = true
                    lifecycleScope.launch(Dispatchers.Main) {
                        Toast.makeText(this@SettingActivity, "ÂüüÂêçÊàñËÄÖapikeyÊ≠£Á°ÆÔºåË∞¢Ë∞¢", Toast.LENGTH_SHORT).show()
                    }
                }
            }


            it?.let {
                settingDialog.setModelList(it)
            }

        }
        binding.editImage.setOnClickListener {
            onClickColor(it)

            settingDialog.showDialog()
        }

        settingDialog.setOnDismissListener {
            binding.editImage.setBackgroundResource(R.drawable.shape_select_site_bg_line1)
        }

        binding.settingBack.setOnClickListener {
            onClickColor(it)
            //finish()
            val intent = Intent(this@SettingActivity, ChatActivity::class.java)
            if (localIsPrompt){
                //localChatPrompt
            }else{
                localChatPrompt = "ËøôÊòØÂà†Èô§ËøáÁöÑÂÜÖÂÆπÂèò‰∏∫Á©∫ÁôΩ"
            }
            intent.putExtra("chat_prompt", localChatPrompt)
            //intent.putExtra("chat_type", )
            startActivity(intent)
            overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)
            finish()
        }

        binding.imageProfile.setOnClickListener {
            // Ë∞ÉÁî®Áõ∏ÂÜåÈÄâÊã©Âô®
//            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
//            startActivityForResult(intent, PICK_IMAGE_REQUEST)

            //toggleEmojiPanelVisibility()
            showEmojiPickerDialog()

        }

        lifecycleScope.launch(Dispatchers.IO) {
            val data = dataStoreManager.readCueWordsSwitch.first()?: true
            data?.let {
                Log.e("ceshi", "ÊèêÁ§∫ËØçÂºÄÂÖ≥Ôºö$it")
                lifecycleScope.launch(Dispatchers.Main) {
                    if (it){
                        binding.cueWordsSwitch.isChecked = true
                        localIsPrompt = true
                    }else{
                        binding.cueWordsSwitch.isChecked = false
                        localIsPrompt = false
                    }
                }

            }

            val dataCueWord = dataStoreManager.readCueWords.first()?: "‰Ω†Â•ΩÔºåÊúâ‰ªÄ‰πàÈóÆÈ¢òÈÉΩÂèØ‰ª•ÈóÆÊàë„ÄÇ"
            dataCueWord?.let {
                Log.e("ceshi", "ÊèêÁ§∫ËØçÊòØÔºö$it")
                lifecycleScope.launch(Dispatchers.Main) {
                    binding.editCueWord.setText(it)
                }

            }

            val dataOfficialCueWord = dataStoreManager.readOfficialWordsSwitch.first()?: true
            dataOfficialCueWord?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                   binding.officialWordsSwitch.isChecked = it
                }

            }

            val dataClearWordsSwitch = dataStoreManager.readClearWordsSwitch.first()?: true
            dataClearWordsSwitch?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    binding.clearSwitch.isChecked = it
                }

            }

            val dataExtractSwitch = dataStoreManager.readExtractSwitch.first()?: true
            dataExtractSwitch?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    binding.extractSwitch.isChecked = it
                }

            }

            val dataPreSwitch = dataStoreManager.readPreSwitch.first()?: true
            dataPreSwitch?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    binding.preSwitch.isChecked = it
                }

            }

            val dataSearchSwitch = dataStoreManager.readSearchSwitch.first()?: true
            dataSearchSwitch?.let {
                lifecycleScope.launch(Dispatchers.Main) {
                    binding.searchSwitch.isChecked = it
                }

            }

        }


        binding.cueWordsSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.saveCueWordsSwitch(isChecked)
            }

        }

        binding.officialWordsSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.saveOfficialWordsSwitch(isChecked)
            }

        }

        binding.clearSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.saveClearWordsSwitch(isChecked)
            }

        }

        binding.preSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.savePreSwitch(isChecked)
            }

        }

        binding.searchSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.saveSearchSwitch(isChecked)
            }

        }

        binding.extractSwitch.setOnCheckedChangeListener { _, isChecked ->

            lifecycleScope.launch(Dispatchers.IO) {
                Log.e("ceshi","ËæìÂÖ•ÂºÄÂÖ≥Ôºö${isChecked}")
                dataStoreManager.saveExtractSwitch(isChecked)
            }

        }

        binding.editCueWord.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                //ÂèÇÊï∞1‰ª£Ë°®ËæìÂÖ•ÁöÑ
                Log.e("TAG", "beforeTextChanged: ËæìÂÖ•ÂâçÔºàÂÜÖÂÆπÂèòÂåñÂâçÔºâÁöÑÁõëÂê¨ÂõûË∞É$s===$start===$count===$after")
            }

            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                Log.e("TAG", "beforeTextChanged: ËæìÂÖ•‰∏≠ÔºàÂÜÖÂÆπÂèòÂåñ‰∏≠ÔºâÁöÑÁõëÂê¨ÂõûË∞É$s===$start===$before===$count")
            }

            override fun afterTextChanged(s: Editable) {
                Log.e("TAG", "beforeTextChanged: ËæìÂÖ•ÂêéÔºàÂÜÖÂÆπÂèòÂåñÂêéÔºâÁöÑÁõëÂê¨ÂõûË∞É$s")
                CoroutineScope(Dispatchers.IO).launch {
                    Log.e("ceshi","ËæìÂÖ•Ôºö${s}")
                    dataStoreManager.saveCueWords(s.toString())
                    localChatPrompt = s.toString()
                }
            }
        })


        /*lifecycleScope.launch((Dispatchers.IO)) {
            val data = dataStoreManager.readImageUrl.first()
            data?.let {
                Log.e("ceshi", "imageurlÊòØ‰∏™Â§öÂ∞ëÔºö$it")
                lifecycleScope.launch(Dispatchers.Main) {
                    // ÊñπÊ≥ï1Ôºö‰ΩøÁî®ÂÜÖÁΩÆÁöÑCircleCropÂèòÊç¢
                    Glide.with(this@SettingActivity)
                        .load(it)
                        .apply(RequestOptions.circleCropTransform())
                        .placeholder(android.R.drawable.ic_menu_gallery)
                        .error(android.R.drawable.stat_notify_error)
                        .into(binding.imageProfile)
                }

            }
        }*/

    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null) {
            val selectedImageUri: Uri = data.data!!

            Toast.makeText(this, "Ê≠£Âú®‰∏ä‰º†ÂõæÁâáÔºåËØ∑Á®çÂêé", Toast.LENGTH_SHORT).show()
            Log.e("ceshi","ËÆæÁΩÆÁïåÈù¢ËøîÂõûÂõæÁâá${selectedImageUri}")

            //‰∏ä‰º†ÂõæÁâáÂà∞ÊúçÂä°Âô®
            lifecycleScope.launch(Dispatchers.IO) {
                chatViewModel.upLoadImage(
                    this@SettingActivity,
                    SystemUtils.uriToTempFile(this@SettingActivity, selectedImageUri), "imgs", false,apiService
                )
            }


        }
    }



    private fun showEmojiPickerDialog() {
        val dialog = Dialog(this)
        dialog.setContentView(R.layout.dialog_emoji_picker)
        dialog.window?.setLayout(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
        dialog.window?.setGravity(Gravity.BOTTOM)
        dialog.window?.attributes?.windowAnimations = R.style.DialogAnimation

        var recyclerView = dialog.findViewById<RecyclerView>(R.id.emojiRecyclerView)
        recyclerView.layoutManager = GridLayoutManager(this, 4)
        recyclerView.adapter = EmojiAdapter(emojis) { selectedEmoji ->
            // Êõ¥Êñ∞TextViewÊòæÁ§∫ÈÄâ‰∏≠ÁöÑË°®ÊÉÖ
            binding.imageProfile.text = selectedEmoji
            lifecycleScope.launch(Dispatchers.IO) {
                dataStoreManager.saveAppEmojisData(selectedEmoji)
            }

            // Ê∑ªÂä†ÈÄâ‰∏≠Âä®ÁîªÊïàÊûú
            binding.imageProfile.scaleX = 0.8f
            binding.imageProfile.scaleY = 0.8f
            binding.imageProfile.animate()
                .scaleX(1.2f)
                .scaleY(1.2f)
                .setDuration(150)
                .withEndAction {
                    binding.imageProfile.animate()
                        .scaleX(1f)
                        .scaleY(1f)
                        .setDuration(150)
                        .start()
                }
                .start()

            dialog.dismiss()
        }

        dialog.findViewById<Button>(R.id.cancelButton).setOnClickListener {
            dialog.dismiss()
        }

        dialog.show()
    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun onModelTypeClick(modelType: String,mServiceProvider:String) {

        Log.e("ceshi","ÊúçÂä°ÂïÜÔºö$mServiceProvider,,$CUSTOMIZE_URL_TWO,,$BASE_URL")
        if (modelType == "testApiKey"){



            isClickTest = true
            lifecycleScope.launch((Dispatchers.IO)) {
                if (mServiceProvider=="302.AI"){
                    apiService = NetworkFactory.createApiService(ApiService::class.java,BASE_URL)
                    val data = dataStoreManager.readData.first()
                    data?.let {
                        Log.e("setting","appKeyÊòØÂ§öÂ∞ëÔºö$it")
                        chatViewModel.get302AiModelList(it,apiService)
                    }
                }else if (mServiceProvider=="Ëá™ÂÆö‰πâ"){
                    apiService = NetworkFactory.createApiService(ApiService::class.java,CUSTOMIZE_URL_TWO)
                    val readCustomizeKeyData = dataStoreManager.readCustomizeKeyData.first()
                    readCustomizeKeyData?.let {
                        Log.e("setting","0appKeyÊòØÂ§öÂ∞ëÔºö$it")
                        chatViewModel.get302AiModelList(it,apiService)
                    }
                }


            }
            Toast.makeText(this, "Ê≠£Âú®Ê£ÄÊµã‰∏≠ÔºåËØ∑Á®çÂêé", Toast.LENGTH_SHORT).show()
        }else if (modelType == "login"){
            showLoginPickerDialog(mServiceProvider)
        }
    }

    override fun onBackPressed() {
        super.onBackPressed()
        Log.e("ceshi","SettingÊã¶Êà™ËøîÂõû")
        val intent = Intent(this@SettingActivity, ChatActivity::class.java)
        if (localIsPrompt){
            //localChatPrompt
        }else{
            localChatPrompt = "ËøôÊòØÂà†Èô§ËøáÁöÑÂÜÖÂÆπÂèò‰∏∫Á©∫ÁôΩ"
        }
        intent.putExtra("chat_prompt", localChatPrompt)
        //intent.putExtra("chat_type", )
        startActivity(intent)
        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)
        finish()
    }


    private fun showLoginPickerDialog(url:String) {
        val dialog = Dialog(this)
        dialog.setContentView(R.layout.dialog_login_picker)
        dialog.window?.setLayout(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
        dialog.window?.setGravity(Gravity.BOTTOM)
        dialog.window?.attributes?.windowAnimations = R.style.DialogAnimation

        mWebView = dialog.findViewById<BridgeWebView>(R.id.webView_login)
        mWebView?.settings?.javaScriptEnabled = true
//        mWebView?.settings?.databaseEnabled = true //Êï∞ÊçÆÂ∫ìÁºìÂ≠ò
        mWebView?.settings?.setGeolocationEnabled(true) // ÂÖÅËÆ∏ÁΩëÈ°µÂÆö‰Ωç
        mWebView?.settings?.loadsImagesAutomatically = true // Âä†Âø´ÁΩëÈ°µÂä†ËΩΩÂÆåÊàêÁöÑÈÄüÂ∫¶ÔºåÁ≠âÈ°µÈù¢ÂÆåÊàêÂÜçÂä†ËΩΩÂõæÁâá
        mWebView?.settings?.domStorageEnabled = true       // ÂºÄÂêØ localStorage
        /*mWebView?.addJavascriptInterface(WebAppInterface(this), "AndroidInterface")
        mWebView?.webViewClient = object : WebViewClient() {
            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                // Âú®È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÊ≥®ÂÖ•ÁõëÂê¨ window.postMessage ÁöÑ JavaScript ‰ª£Á†Å
                mWebView?.evaluateJavascript(
                    """
                window.addEventListener('info', function(info) {
                    AndroidInterface.receiveMessage(JSON.stringify(info.data));
                });
            """.trimIndent(), null
                )
            }
        }*/
        mWebView?.webViewClient = object : WebViewClient() {

            override fun shouldInterceptRequest(
                view: WebView?,
                request: WebResourceRequest?
            ): WebResourceResponse? {
                // ÂÖàË∞ÉÁî®Áà∂Á±ªÊñπÊ≥ïËé∑ÂèñÂéüÂßãÂìçÂ∫îÔºà‰πüÂèØËá™Â∑±ÈáçÊñ∞ËØ∑Ê±ÇÁΩëÁªúËé∑ÂèñÂìçÂ∫îÔºåÊåâÈúÄÈÄâÊã©Ôºâ
                val originalResponse = super.shouldInterceptRequest(view, request)

                if (request?.url.toString().contains("apikey=")) {
                    // Ëß£Êûê JSON Êï∞ÊçÆÔºåÂÅáËÆæËøîÂõûÁöÑÊòØ JSON Ê†ºÂºè
                    try {
                        Log.e("ceshi","‰∏çÊòØÁ©∫${request?.url.toString()}")
                        Log.e("ceshi","Êà™ÂèñÁöÑkeyÔºö${extractApiKey(request?.url.toString())}")
                        lifecycleScope.launch(Dispatchers.IO) {
                            dataStoreManager.saveData(extractApiKey(request?.url.toString())!!)
                        }
                        lifecycleScope.launch(Dispatchers.Main) {
                            mDialog?.findViewById<EditText>(R.id.edit_apiKey)?.setText(extractApiKey(request?.url.toString()))
                            Toast.makeText(this@SettingActivity, "ÁôªÂΩïÊàêÂäüÔºåË∞¢Ë∞¢", Toast.LENGTH_SHORT).show()
                        }
                        dialog.dismiss()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
                return originalResponse
            }
        }



        val html = "https://dash.302.ai/sso/login?app=302+AI+Studio&name=302+AI+Studio&icon=https://file.302.ai/gpt/imgs/5b36b96aaa052387fb3ccec2a063fe1e.png&weburl=https://302.ai/&redirecturl=https://dash.302.ai/dashboard/overview&lang=zh-CN"
        val htmlTest = "https://test-dash.gpt302.com/sso/login?app=302.ai&name=302AI&icon=https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp&weburl=https://baidu.com&redirecturl=https://test-dash.gpt302.com/dashboard/overview&lang=zh-CN"
        mWebView?.loadUrl(url)


        dialog.findViewById<Button>(R.id.cancelLoginButton).setOnClickListener {
            // ÁÇπÂáªÊó∂ÊâßË°åÂä®ÁîªÊïàÊûú
            ViewAnimationUtils.performClickEffect(it)
            dialog.dismiss()
        }

        dialog.show()
    }

    class WebAppInterface(private val context: Context) {
        @JavascriptInterface
        fun receiveMessage(info: WebBackInfo) {
            Log.e("ceshi", "0Êé•Êî∂Âà∞Êù•Ëá™ auth ÁöÑÊï∞ÊçÆ: ${info.data.api_key}")
            try {
                //val jsonData = JSONObject(message)

            } catch (e: JSONException) {
                e.printStackTrace()
            }
        }
    }

    data class WebBackInfo(
        val data:InfoBack
    )
    data class InfoBack(
        val api_key:String
    )

    inner class JavaScriptInterface {
        @JavascriptInterface
        fun onReceiveApiKey(apiKey: String) {
            // Âú®‰∏ªÁ∫øÁ®ãÂ§ÑÁêÜÊãøÂà∞ÁöÑ api_key
            runOnUiThread {
                println("ÈÄöËøá JS Ê≥®ÂÖ•Ëé∑ÂèñÂà∞ api_key: $apiKey")
                // ÂêéÁª≠‰∏öÂä°ÈÄªËæë...
            }
        }
    }

    private fun extractApiKey(url: String): String? {
        // Êü•ÊâæÈóÆÂè∑ÔºàÂèÇÊï∞Ëµ∑Âßã‰ΩçÁΩÆÔºâ
        val queryStart = url.indexOf('?')
        if (queryStart == -1) {
            return null // Ê≤°ÊúâÂèÇÊï∞ÈÉ®ÂàÜ
        }

        // ÊèêÂèñÊâÄÊúâÂèÇÊï∞ÔºàÈóÆÂè∑ÂêéÈù¢ÁöÑÈÉ®ÂàÜÔºâ
        val queryParams = url.substring(queryStart + 1)

        // ÂàÜÂâ≤ÂèÇÊï∞ÔºàÊåâ & Á¨¶Âè∑Ôºâ
        val params = queryParams.split("&")

        // ÈÅçÂéÜÂèÇÊï∞ÔºåÊâæÂà∞ apikey
        for (param in params) {
            val keyValue = param.split("=", limit = 2) // ÈôêÂà∂ÂàÜÂâ≤‰∏∫2ÈÉ®ÂàÜÔºàÈò≤Ê≠¢ÂÄº‰∏≠ÂåÖÂê´=Ôºâ
            if (keyValue.size == 2 && keyValue[0] == "apikey") {
                return keyValue[1] // ËøîÂõûapikeyÁöÑÂÄº
            }
        }

        return null // Êú™ÊâæÂà∞apikeyÂèÇÊï∞
    }


}